drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.05) %>% # reduce the number of points that need to be plotted
mutate(sig= case_when(
padj<0.05 & abs(log2FoldChange)>=2~"high-sig",
padj<0.05 ~"sig",
TRUE~"non-sig")) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>%
filter(sig=="high-sig") %>%
drop_na(xtr_pep_name_x) %>%
mutate(dups=duplicated(xtr_pep_name_x)) -> test#
View(test)
## pull out xtrop gene names for significant sets
shr.dds %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
filter(comparison!="interaction") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.05) %>% # reduce the number of points that need to be plotted
mutate(sig= case_when(
padj<0.05 & abs(log2FoldChange)>=2~"high-sig",
padj<0.05 ~"sig",
TRUE~"non-sig")) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>%
#filter(sig=="high-sig") %>%
drop_na(xtr_pep_name_x) %>%
mutate(dups=duplicated(xtr_pep_name_x)) -> test#
View(test)
2.966885e-03
my_genes<-read_csv("../genes_of_interest.csv")
all(my_genes$xen_gene %in% pcu23$xen_blastx_xb_gene)
my_genes$xen_gene[!tolower(my_genes$xen_gene) %in% tolower(xtrop$xtr_pep_name_x)]
library(readxl)
setwd("/Users/christophliedtke/Library/Group Containers/G69SCX94XU.duck/Library/Application Support/duck/Volumes/EBD iMac/Documents/P_cultripes/countershading/rnaseq/deseq2/skin")
my_genes<-read_xlsx("../genes_of_interest.xlsx", sheet = "genes_of_interest")
all(my_genes$xen_gene %in% pcu23$xen_blastx_xb_gene)
my_genes$xen_gene[!tolower(my_genes$xen_gene) %in% tolower(xtrop$xtr_pep_name_x)]
xtrop<-read_csv("../../annotations/NEWEST/PCU23_annotations_xtr105_genes.csv") # clean reload if needed
xtrop <- xtrop %>%
mutate(gene_join=tolower(xtr_pep_name_x)) %>%
left_join(my_genes %>%
mutate(gene_join=tolower(xen_gene)),
by="gene_join")
shr.dds %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
filter(comparison!="interaction") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.05) %>% # reduce the number of points that need to be plotted
mutate(sig= case_when(
padj<0.05 & abs(log2FoldChange)>=2~"high-sig",
padj<0.05 ~"sig",
TRUE~"non-sig")) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
mutate(shp=padj<1e-20,
padj=ifelse(padj<1e-20, 1e-20, padj)) %>% # truncate super small p values
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), col=sig)) +
geom_point(alpha=0.75, aes(shape=shp)) +
geom_point(data=. %>%
filter(!is.na(`simplified category`),
padj<0.05),
shape=21, size=2, color="00FFFFFF",
aes(fill=`simplified category`)) +
geom_hline(yintercept = -log10(0.05), color="red", linewidth=0.2) +
geom_text_repel(data=. %>%
filter(sig=="high-sig" |  sig!="non-sig" & !is.na(`simplified category`)),
#aes(label=ifelse(is.na(xtr_pep_name_x),gene_id ,xtr_pep_name_x)),
aes(label=xtr_pep_name_x),
size=2,segment.size=0.25,
color="black",
max.overlaps = Inf) +
xlim(-10,10) +
scale_color_manual(values = c("high-sig"="black", "sig"="grey75", "non-sig"="grey90")) +
scale_shape_manual(values = c("TRUE"=17, "FALSE"=16))+
facet_wrap(~comparison, ncol = 2, scales = "free") +
theme_minimal()
shiny::runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop/testapp')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
library(tensorflow)
remove.packages("tensorflow", lib="~/Library/R/4.0/library")
remove.packages("keras", lib="~/Library/R/4.0/library")
# install keras and tensorflow
install.packages("remotes")
remotes::install_github(sprintf("rstudio/%s", c("reticulate", "tensorflow", "keras")))
remove.packages("keras", lib="~/Library/R/4.0/library")
remove.packages("tensorflow", lib="~/Library/R/4.0/library")
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
packs
write.csv(packs, "~/Desktop/packs.csv")
remotes::install_github(sprintf("rstudio/%s", c("reticulate", "tensorflow", "keras")))
reticulate::miniconda_uninstall() # start with a blank slate
reticulate::install_miniconda()
keras::install_keras()
keras::install_keras()
# load librarys
library(keras)
library(tensorflow)
# set wd
setwd("~/Dropbox/_dorsalpatterns/")
# set wd
setwd("~/Desktop//_dorsalpatterns/")
knitr::opts_chunk$set(echo = TRUE)
# install keras and tensorflow
install.packages("remotes")
remotes::install_github(sprintf("rstudio/%s", c("reticulate", "tensorflow", "keras")))
reticulate::miniconda_uninstall() # start with a blank slate
reticulate::install_miniconda()
# load librarys
library(keras)
library(tensorflow)
# set wd
setwd("~/Desktop/_dorsalpatterns/")
# define image paths and get image names
image_paths = list.files(path="./jpegs/", pattern = ".jpg" , recursive = TRUE, full.names = TRUE)
image_names<-basename(image_paths) %>%
str_remove_all(".jpg|HCL_")
library(tidyverse)
image_names<-basename(image_paths) %>%
str_remove_all(".jpg|HCL_")
# read meta data
dat<-read_csv("pelobates_data.csv")
# read meta data
dat<-read_csv("pelobates_data.csv")
## prep data
dat<-dat %>%
select(`ID Number`, Sex, Photo) %>%
distinct_all() %>%
mutate(Photo=str_remove_all(Photo, "-\\d+")) %>%
filter(Photo %in% image_names)
## remove photos not in data
image_paths<-image_paths[image_names %in% dat$Photo]
image_names<-image_names[image_names %in% dat$Photo]
# define image preprocessor for use with keras
image_preprocessor = function(image_path) {
image = image_load(image_path, target_size = c(224,224))
image = image_to_array(image)
image = array_reshape(image, c(1, dim(image)))
image = imagenet_preprocess_input(image)
return(image)
}
train_list = lapply(image_paths[image_names %in% train], image_preprocessor)
image_paths
image_names
train
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
splt <- sample(c(TRUE, FALSE), nrow(dat), replace=TRUE, prob=c(0.8,0.2))
train  <- dat %>%
filter(splt) %>%
pull(Photo)
test <- dat %>%
filter(!splt) %>%
pull(Photo)
train_list = lapply(image_paths[image_names %in% train], image_preprocessor)
n
reticulate::miniconda_uninstall() # start with a blank slate
reticulate::install_miniconda()
keras::install_keras()
# load librarys
library(keras)
library(tensorflow)
library(tidyverse)
train_list = lapply(image_paths[image_names %in% train], image_preprocessor)
## combine toad inventories
setwd("Downloads/Toad Inventory/")
source("~/.active-rstudio-document", echo=TRUE)
?knitr::opts_knit$set
?knitr::opts_knit
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(base.dir ="~/Documents/git_projects/RforBiologists/docs/", base.url = "/")
knitr::opts_chunk$set(fig.path = "../images/")
library(tidyverse)
pressure
gg<-pressure %>%
ggplot(x=temperature, y=pressure) +
geom_point()
gg
gg<-pressure %>%
ggplot(aes(x=temperature, y=pressure)) +
geom_point()
gg
library(plotly)
ggplotly(gg)
install.packages("webshot")
webshot::install_phantomjs()
pressure
pressure %>%
reactable()
library(reactable)
pressure %>%
reactable()
#install.packages("webshot")
#webshot::install_phantomjs()
htmlwidgets::saveWidget()
install.packages("widgetframe")
library(widgetframe)
rt<-pressure %>%
reactable()
library(DT)
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library("webexercises")
# set working directory
setwd("~/Documents/git_projects/UAM23_rnaseq/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,DESeq2, ageglm,ggVennDiagram,UpSetR,plotly,ggrepel,scico)
# DEG object
dds<-readRDS("./results/deseq2_dds.rds")
# the list of DEG results
res<-readRDS("./results/deseq2_results.rds")
# Load BLAST results
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
head(xtrop, 20)
summary(res$bD_bV, alpha=0.05)
# For a single comparison
res$bD_bV %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
# turn it into a function so we can apply it to a list!
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
#  extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# comparing just the dorsal vs. ventral
sig_deg[c("bD_bV","wD_wV")] %>%
ggVennDiagram(edge_size = 0) +
scale_fill_scico(palette = "batlow")
ggVennDiagram(sig_deg,edge_size = 0) +
scale_fill_scico(palette = "batlow")
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show	= TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq"))
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show	= TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq")) +
scale_fill_scico(palette = "batlow")
upset(fromList(sig_deg),
number.angles = 0, point.size = 3, line.size = 1,
sets.x.label = "Number of DEGs",
set_size.show	= TRUE,
set_size.scale_max = max(sapply(sig_deg, length))+50, # needed only to expand the axis a bit
text.scale = c(1.2, 1.2, 1.2, 1.2, 1.5, 1.5),
order.by=c("degree","freq"))
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
# we can now turn this into an interactive plot:
ggplotly(gg_res, tooltip="text")
res$bD_bV %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16)
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
# we can now turn this into an interactive plot:
ggplotly(gg_res, tooltip="text")
gg_res
# we can now turn this into an interactive plot:
ggplotly(gg_res, tooltip="text")
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data=. %>% filter(sig),
aes(label=xtr_pep_name_x),
max.overlaps = 50,
size=2) +
xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
DESeq2::plotMA(res$bD_bV)
# apeglm shrinkage can only be done on already calculated coefficients:
resultsNames(dds)
bD_bV_res <- results(dds,
contrast= c("condition","white_ventral", "black_dorsal"))
bD_bV_res
# with shrinkage
bD_bV_shr<-lfcShrink(dds,
coef="condition_white_ventral_vs_black_dorsal",
type="apeglm")
bD_bV_shr
par(mfrow=c(1,2))
par(mar=c(4,4,4,1))
DESeq2::plotMA(bD_bV_res, main="MLE")
DESeq2::plotMA(bD_bV_shr, main="MAP")
par(mfrow=c(1,2))
par(mar=c(4,4,1,1))
# p values
plot(bD_bV_res$padj~bD_bV_shr$padj,
xlab="adjusted p-value (shrunk)",
ylab="adjusted p-value (MLE)")
# fold changes
plot(bD_bV_res$log2FoldChange~bD_bV_shr$log2FoldChange,
xlab="Fold Change (shrunk)",
ylab="Fold Change (MLE)")
par(mfrow=c(1,1))
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE,
fig.width = 12)
knitr::opts_knit$set(root.dir = '../')
library("webexercises")
# set working directory
setwd("~/Documents/git_projects/UAM23_rnaseq/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,gprofiler2)
# set working directory
setwd("~/Documents/git_projects/UAM23_rnaseq/")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,gprofiler2)
# the list of DEG results from the previous exercises
res<-readRDS("./results/deseq2_results.rds")
# the annotations
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
extract_degs<-function(x) {
return(
x %>%
as_tibble(rownames = "gene") %>%
filter(padj<0.05) %>%
pull(gene)
)
}
# now extract all
sig_deg<-lapply(res, FUN=extract_degs)
str(sig_deg)
# make a function that extracts matching X. tropicalis IDs
extract_xtr<-function(x) {
return(
xtrop %>%
filter(gene_id %in% x) %>%
pull(xtr_pep_id_x) %>%
unique()
)
}
# apply function to list of Pelobates IDs
xtr_deg<-lapply(sig_deg, FUN=extract_xtr)
str(xtr_deg)
sapply(sig_deg, length)
sapply(xtr_deg, length)
xtr_bg<-extract_xtr(rownames(res$bD_bV))
str(xtr_bg)
# set base url:
set_base_url("https://biit.cs.ut.ee/gprofiler_archive3/e105_eg52_p16")
# run the analysis
res_ora<-gost(multi_query = FALSE, # returns separate results tables for multiquery
custom_bg = xtr_bg, # our background
query=xtr_deg, # our list of gene sets
organism="xtropicalis", # the organism our annotations belong to
exclude_iea = FALSE, # include GO terms that were electronically assigned
correction_method = "gSCS", # the recommended multiple testing correction.
sources=c("GO:BP","GO:CC","GO:MF", "KEGG","REAC"), # the functional sets we are interested in
evcodes=FALSE, ## evcodes TRUE needed for downstream analysis like enrichment maps in Cytoscape, but this takes longer.
significant= FALSE) # return all terms, not just the significant ones
# the results are stored as a "results" dataframe
head(res_ora$result)
colnames(res_ora$result)
res_ora$result %>%
filter(p_value<0.05) %>%
group_by(query) %>%
dplyr::count(query, sort=TRUE)
gostplot(res_ora)
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_colour_viridis_c(direction = 1, option = "magma") +
facet_grid(source~query,scales = "free_y",space = "free") +
theme_bw()
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_color_scico(palette = "batlow")
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_color_scico(palette = "batlow") +
#scale_colour_viridis_c(direction = 1, option = "magma") +
facet_grid(source~query,scales = "free_y",space = "free") +
theme_bw()
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_color_scico(palette = "batlow", direction = 1) +
#scale_colour_viridis_c(direction = 1, option = "magma") +
facet_grid(source~query,scales = "free_y",space = "free") +
theme_bw()
res_ora$result %>%
select(query,term_name, p_value, intersection_size, query_size,source) %>%
filter(p_value<0.05) %>%
mutate(GeneRatio=intersection_size/query_size) %>%
arrange(GeneRatio) %>%
mutate(term_name = factor(term_name, levels=unique(term_name))) %>%
ggplot(aes(x=GeneRatio, y=term_name)) +
geom_point(aes(color=p_value, size=intersection_size)) +
ylab("") +
scale_color_scico(palette = "batlow", direction = -1) +
#scale_colour_viridis_c(direction = 1, option = "magma") +
facet_grid(source~query,scales = "free_y",space = "free") +
theme_bw()
scico_palette_show()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("lme")
install.packages("devtools")
# loading a package
library(devtools)
plot(cars)
plot(cars)
# set working directory
setwd("~/Documents/git_projects/RforBiologists_UDSM/")
